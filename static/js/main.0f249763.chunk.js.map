{"version":3,"sources":["App.module.css","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","users","per_page","current_page","makeHttpRequestWithPage","pageNumber","a","fetch","method","headers","response","json","data","setState","total","length","page","this","renderPageNumbers","pageNumbers","i","Math","ceil","push","map","number","classes","styles","active","key","className","onClick","array","part","result","chunk","count","last","undefined","arrayChunk","index","id","user","first_name","last_name","app","pagination","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAa,wBAAwB,OAAS,sB,iFCDvFD,EAAOC,QAAU,IAA0B,kC,2LCwI5BC,E,4MAlGbC,MAAQ,CACNC,MAAO,KAEPC,SAAU,EACVC,aAAc,G,EAKhBC,wB,uCAA0B,WAAMC,GAAN,iBAAAC,EAAA,sEACHC,MAAM,oCAAD,OAAqCF,GAAc,CAC3EG,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sBALI,cACpBC,EADoB,gBASLA,EAASC,OATJ,OASlBC,EATkB,OAWxB,EAAKC,SAAS,CACZZ,MAAOW,EAAKA,KACZE,MAAOF,EAAKA,KAAKG,OACjBZ,aAAcS,EAAKI,OAdG,2C,wHAFxBC,KAAKb,wBAAwB,K,+BA0B/B,IALU,IACAH,EACAiB,EAFD,OAGGC,EAAc,GAEjBC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,KAAKjB,MAAMc,MAAQG,KAAKjB,MAAME,UAAWkB,IACtED,EAAYI,KAAKH,IAIjBF,EAAoBC,EAAYK,KAAI,SAAAC,GAClC,IAAIC,EAAU,EAAK1B,MAAMG,eAAiBsB,EAASE,IAAOC,OAAS,GAEnE,OACE,0BAAMC,IAAKJ,EAAQK,UAAWJ,EAASK,QAAS,WAAM,EAAKlB,SAAS,CAACV,aAAasB,MAAYA,MAKzE,OAArBR,KAAKjB,MAAMC,SAKbA,EApFa,SAAC+B,EAAMC,GAIxB,IAHA,IAAIC,EAAS,GACTC,EAAQ,GACRC,EAAQ,EACJhB,EAAE,EAAGA,EAAIY,EAAMjB,OAAQK,IAAI,CAC/B,IAAIiB,OAAI,EACLD,EAAQH,SACYK,GAAhBN,EAAMZ,EAAI,KACXiB,EAAOL,EAAMZ,IAEfe,EAAMZ,KAAKS,EAAMZ,IACjBgB,KAGDA,IAAUH,IACTC,EAAOX,KAAKY,GACbC,EAAQ,EACRD,EAAQ,IAGRE,GAAQD,IAAUH,GACfE,EAAMpB,QACRmB,EAAOX,KAAKY,GAKlB,OAAOD,EAuDYK,CADT,YAAOtB,KAAKjB,MAAMC,OACO,GAEduB,KAAI,SAACvB,EAAMuC,GAC9B,IAAIZ,EAAS,EAAK5B,MAAMG,eAAiBqC,EAAM,EAAI,SAAW,GAE5D,OACE,yBAAKV,UAAS,cAASF,GAAUa,GAAID,EAAM,GAEtCvC,EAAMuB,KAAI,SAACkB,GACV,OACE,yBAAKZ,UAAU,SACb,8BAAOY,EAAKD,IACZ,8BAAOC,EAAKC,YACZ,8BAAOD,EAAKE,oBAU5B,OACE,yBAAKd,UAAWH,IAAOkB,KAEnB,yBAAKf,UAAU,SACX,yBAAKA,UAAU,QACb,qCACA,4CACA,4CAEJ,yBAAKA,UAAU,QACV7B,IAGP,yBAAK6B,UAAWH,IAAOmB,YACvB,0BAAMf,QAAS,kBAAM,EAAKlB,SAAS,CAACV,aAAa,MAAjD,QACCe,EACD,0BAAMa,QAAS,WAAO,EAAKlB,SAAS,CAACV,aAAae,EAAkBH,WAApE,c,GA1FSgC,aCzBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f249763.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__zR7Xa\",\"pagination\":\"App_pagination__2f_2N\",\"active\":\"App_active__1xtjH\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport styles from './App.module.css'\r\n\r\n\r\nconst arrayChunk = (array,part) =>{\r\n  let result = [];\r\n  let chunk = [];\r\n  let count = 0;\r\n  for(let i=0; i < array.length; i++){\r\n      let last;\r\n      if(count < part) {\r\n          if(array[i + 1] == undefined) {\r\n            last = array[i];\r\n          }\r\n          chunk.push(array[i])\r\n          count++\r\n      }\r\n      \r\n      if(count === part) {\r\n          result.push(chunk)\r\n         count = 0;\r\n         chunk = [];\r\n      }\r\n      \r\n      if(last && count !== part) {\r\n         if(chunk.length) {\r\n          result.push(chunk)\r\n         }\r\n        }\r\n    \r\n    }\r\n    return result\r\n}\r\n\r\n\r\n class App extends Component {\r\n  state = {\r\n    users: null,\r\n   // total: null,\r\n    per_page: 2,\r\n    current_page: 1\r\n  }\r\n  componentDidMount() {\r\n    this.makeHttpRequestWithPage(1)\r\n  }\r\n  makeHttpRequestWithPage = async pageNumber => {\r\n    let response = await fetch(`https://reqres.in/api/users?page=${pageNumber}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    this.setState({\r\n      users: data.data,\r\n      total: data.data.length,\r\n      current_page: data.page,\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n        let users;\r\n        let renderPageNumbers;\r\n        const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(this.state.total / this.state.per_page); i++) {\r\n    pageNumbers.push(i);\r\n    }\r\n\r\n\r\n    renderPageNumbers = pageNumbers.map(number => {\r\n      let classes = this.state.current_page === number ? styles.active : '';\r\n\r\n      return (\r\n        <span key={number} className={classes} onClick={() =>{this.setState({current_page:number})}}>{number}</span>\r\n      );\r\n    });\r\n  \r\n\r\n    if (this.state.users !== null) {\r\n      let count;\r\n      let user = [...this.state.users];\r\n      let usersChunk = arrayChunk(user,2);\r\n  \r\n      users = usersChunk.map((users,index) =>{  \r\n      let active = this.state.current_page === index+1 ? 'active' : ''\r\n        \r\n        return(\r\n          <div className={`row ${active}`} id={index+1} >\r\n             {\r\n               users.map((user) => {\r\n                return (\r\n                  <div className=\"inner\">\r\n                    <span>{user.id}</span>\r\n                    <span>{user.first_name}</span>\r\n                    <span>{user.last_name}</span>\r\n                </div>\r\n                )\r\n              })\r\n             }\r\n          </div>\r\n        )\r\n      \r\n      })\r\n    }\r\n    return (\r\n      <div className={styles.app}>\r\n          \r\n          <div className=\"table\">\r\n              <div className=\"head\">\r\n                <span>S/N</span>\r\n                <span>First Name</span>\r\n                <span>Last Name</span>\r\n              </div>\r\n            <div className=\"body\">\r\n                {users}\r\n            </div>\r\n          </div>\r\n          <div className={styles.pagination}>\r\n          <span onClick={() => this.setState({current_page:1})}>&laquo;</span>\r\n          {renderPageNumbers}\r\n          <span onClick={() => {this.setState({current_page:renderPageNumbers.length})}}>&raquo;</span>\r\n        </div>\r\n  \r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}